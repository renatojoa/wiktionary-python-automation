{
  "_from": "behave",
  "_id": "behave@0.2.2",
  "_inBundle": false,
  "_integrity": "sha1-koRp3tRZLdkghoa+h1FwqQQZfQY=",
  "_location": "/behave",
  "_phantomChildren": {},
  "_requested": {
    "type": "tag",
    "registry": true,
    "raw": "behave",
    "name": "behave",
    "escapedName": "behave",
    "rawSpec": "",
    "saveSpec": null,
    "fetchSpec": "latest"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/behave/-/behave-0.2.2.tgz",
  "_shasum": "928469ded4592dd9208686be875170a904197d06",
  "_spec": "behave",
  "_where": "C:\\Users\\Renato\\Downloads\\ProjetoSystemTest-master\\features",
  "author": {
    "name": "Coen Hyde"
  },
  "bugs": {
    "url": "https://github.com/coen-hyde/behave/issues"
  },
  "bundleDependencies": false,
  "deprecated": false,
  "description": "Wraps a function to limit the amount of times it can be called, then calls the a notifier function once that limit has been reached.",
  "devDependencies": {
    "mocha": "~1.11.0",
    "should": "~1.2.2"
  },
  "homepage": "https://github.com/coen-hyde/behave#readme",
  "keywords": [
    "function",
    "limit"
  ],
  "license": "BSD",
  "main": "index.js",
  "name": "behave",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/coen-hyde/behave.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.2.2"
}
